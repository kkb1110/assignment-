#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define TABLE_SIZE 10
typedef struct Node {
    int data;
    struct Node* next;
} Node;
Node* hashTable[TABLE_SIZE];
void initializeTable() {
    for (int i = 0; i < TABLE_SIZE; i++) 
        hashTable[i] = NULL;
}
int hashFunction(int key) {
    return key % TABLE_SIZE;
}
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
void insert(int data) {
    int index = hashFunction(data);
    Node* newNode = createNode(data);
    if (hashTable[index] == NULL) 
        hashTable[index] = newNode;
    else {
        newNode->next = hashTable[index];
        hashTable[index] = newNode;
    }
    printf("Inserted %d at index %d\n", data, index);
}

int search(int data) {
    int index = hashFunction(data);
    Node* temp = hashTable[index];
    while (temp != NULL) {
        if (temp->data == data) 
            return 1; 
        temp = temp->next;
    }
    return 0; 
}
void displayTable() {
    for (int i = 0; i < TABLE_SIZE; i++) {
        printf("Index %d: ", i);
        Node* temp = hashTable[i];
        while (temp != NULL) {
            printf("%d -> ", temp->data);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}
void delete(int data) {
    int index = hashFunction(data);
    Node* temp = hashTable[index];
    Node* prev = NULL;
    while (temp != NULL && temp->data != data) {
        prev = temp;
        temp = temp->next;
    }
    if (temp == NULL) {
        printf("Value %d not found\n", data);
        return;
    }
    if (prev == NULL)
        hashTable[index] = temp->next; // Node to delete is the first node
    else 
        prev->next = temp->next;
    free(temp);
    printf("Deleted %d from index %d\n", data, index);
}
int main() {
    int choice, value;
    initializeTable();
    while (1) {
        printf("\nHash Table Operations:\n");
        printf("1. Insert\n");
        printf("2. Search\n");
        printf("3. Delete\n");
        printf("4. Display\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter value to insert: ");
                scanf("%d", &value);
                insert(value);
                break;
            case 2:
                printf("Enter value to search: ");
                scanf("%d", &value);
                if (search(value)) 
                    printf("Value %d found in the hash table\n", value);
                else 
                    printf("Value %d not found in the hash table\n", value);
                break;
            case 3:
                printf("Enter value to delete: ");
                scanf("%d", &value);
                delete(value);
                break;
            case 4:
                displayTable();
                break;
            case 5:
                printf("Exiting program.\n");
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
    return 0;
}




#include <stdio.h>
#include <stdlib.h>
#define MAX 100
typedef struct Node {
    int vertex;
    struct Node* next;
} Node;
typedef struct Queue {
    int items[MAX];
    int front, rear;
} Queue;
typedef struct Graph {
    int numVertices;
    Node** adjLists;
} Graph;
Node* createNode(int vertex) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (!newNode) {
        printf("Memory allocation error\n");
        exit(1);
    }
    newNode->vertex = vertex;
    newNode->next = NULL;
    return newNode;
}
Graph* createGraph(int vertices) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    if (!graph) {
        printf("Memory allocation error\n");
        exit(1);
    }
    graph->numVertices = vertices;
    graph->adjLists = (Node**)malloc(vertices * sizeof(Node*));
    if (!graph->adjLists) {
        printf("Memory allocation error\n");
        exit(1);
    }
    for (int i = 0; i < vertices; i++) {
        graph->adjLists[i] = NULL;
    }
    return graph;
}
void addEdge(Graph* graph, int src, int dest) {
    Node* newNode = createNode(dest);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;
    newNode = createNode(src);
    newNode->next = graph->adjLists[dest];
    graph->adjLists[dest] = newNode;
}
void initQueue(Queue* q) {
    q->front = -1;
    q->rear = -1;
}
int isEmpty(Queue* q) {
    return q->front == -1;
}
void enqueue(Queue* q, int value) {
    if (q->rear == MAX - 1) {
        printf("Queue Overflow\n");
        return;
    }
    if (q->front == -1)
        q->front = 0;
    q->items[++q->rear] = value;
}
int dequeue(Queue* q) {
    if (isEmpty(q)) {
        printf("Queue Underflow\n");
        return -1;
    }
    int value = q->items[q->front];
    if (q->front == q->rear) 
        q->front = q->rear = -1;
    else 
        q->front++;
    return value;
}
void BFS(Graph* graph, int startVertex) {
    int visited[MAX] = {0}; 
    Queue q;
    initQueue(&q);
    visited[startVertex] = 1;
    enqueue(&q, startVertex);
    printf("BFS Traversal: ");
    while (!isEmpty(&q)) {
        int currentVertex = dequeue(&q);
        printf("%d ", currentVertex);
        Node* temp = graph->adjLists[currentVertex];
        while (temp) {
            int adjVertex = temp->vertex;
            if (!visited[adjVertex]) {
                visited[adjVertex] = 1;
                enqueue(&q, adjVertex);
            }
            temp = temp->next;
        }
    }
    printf("\n");
}
int main() {
    int vertices, edges, src, dest, startVertex;
    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);
    Graph* graph = createGraph(vertices);
    printf("Enter the number of edges: ");
    scanf("%d", &edges);
    printf("Enter the edges (source and destination):\n");
    for (int i = 0; i < edges; i++) {
        scanf("%d %d", &src, &dest);
        addEdge(graph, src, dest);
    }
    printf("Enter the starting vertex: ");
    scanf("%d", &startVertex);
    BFS(graph, startVertex);
    return 0;
}




#include <stdio.h>
#include <stdlib.h>
#define MAX 100 
typedef struct Queue {
    int items[MAX];
    int front, rear;
} Queue;
void initQueue(Queue* q) {
    q->front = -1;
    q->rear = -1;
}
int isEmpty(Queue* q) {
    return q->front == -1;
}
void enqueue(Queue* q, int value) {
    if (q->rear == MAX - 1) {
        printf("Queue Overflow\n");
        return;
    }
    if (q->front == -1) 
        q->front = 0;
    q->items[++q->rear] = value;
}
int dequeue(Queue* q) {
    if (isEmpty(q)) {
        printf("Queue Underflow\n");
        return -1;
    }
    int value = q->items[q->front];
    if (q->front == q->rear){
        q->front = q->rear = -1; 
    }
    else 
        q->front++;
    return value;
}
void BFS(int graph[MAX][MAX], int numVertices, int startVertex) {
    int visited[MAX] = {0}; 
    Queue q;
    initQueue(&q);
    visited[startVertex] = 1;
    enqueue(&q, startVertex);
    printf("BFS Traversal: ");
    while (!isEmpty(&q)) {
        int currentVertex = dequeue(&q);
        printf("%d ", currentVertex);
        for (int i = 0; i < numVertices; i++) {
            if (graph[currentVertex][i] == 1 && !visited[i]) {
                visited[i] = 1;
                enqueue(&q, i);
            }
        }
    }
    printf("\n");
}
int main() {
    int graph[MAX][MAX], numVertices, startVertex;
    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < numVertices; i++) 
        for (int j = 0; j < numVertices; j++) 
            scanf("%d", &graph[i][j]); 
    printf("Enter the starting vertex: ");
    scanf("%d", &startVertex);
    BFS(graph, numVertices, startVertex);
    return 0;
}
